{"version":3,"sources":["component/navbar top/index.js","component/video/index.js","App.js","serviceWorker.js","index.js"],"names":["NavbarTop","className","VideoContent","props","circleIndicator","React","createRef","videoTag","myCanvas","labelTag","circleTag","btnClick","btnCapture","state","cameraType","mirrorMode","flipBtn","frameVideo","imageData","ConvertToHex","getHexa","value","hexa","parseInt","toString","length","r","g","b","hexaColor","setColor","circleColor","style","backgroundColor","data","contexCanvas","getImageData","width","height","setTimeout","drawImage","video","offsetWidth","offsetHeight","frame","putImageData","scale","tbClient","localStorage","getItem","clientColor","JSON","stringify","id","uniqID","color","setItem","console","log","front","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","catch","btnFlip","this","current","circleIndi","getContext","CaptureColor","Math","floor","Date","now","random","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","getSupportedConstraints","access","addEventListener","offsetTop","play","div","ref","autoPlay","animationDelay","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6902dd28.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction NavbarTop() {\r\n    return (\r\n        <div className=\"navbar__container\">\r\n            <h2>Navbar Content</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavbarTop;\r\n","import React, { Component } from 'react';\r\nimport './index.css';\r\n\r\nimport FlipCameraAndroidIcon from '@material-ui/icons/FlipCameraAndroid';\r\nimport CameraIcon from '@material-ui/icons/Camera';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\nclass VideoContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.circleIndicator = React.createRef()\r\n        this.videoTag = React.createRef();\r\n        this.myCanvas = React.createRef();\r\n        this.labelTag = React.createRef();\r\n        this.circleTag = React.createRef();\r\n        this.btnClick = React.createRef();\r\n        this.btnCapture = React.createRef();\r\n\r\n        this.state = {\r\n            cameraType: 'back',\r\n            mirrorMode: false\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // const labelHexa = this.labelTag.current;\r\n        const btnFlip = this.btnClick.current;\r\n        const circleColor = this.circleTag.current;\r\n        const circleIndi = this.circleTag.current;\r\n        const contexCanvas = this.myCanvas.current.getContext('2d')\r\n        const video = this.videoTag.current;\r\n        const CaptureColor = this.btnCapture.current;\r\n        const uniqID = Math.floor(Date.now() + Math.random() * 10)\r\n        var setColor = null\r\n\r\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia || navigator.mediaDevices.getSupportedConstraints();\r\n\r\n        const access = await navigator.mediaDevices.getUserMedia({ video: true });\r\n\r\n        var front = false;\r\n        // jika user memberikan izin\r\n        if (access) {\r\n            navigator.mediaDevices\r\n                .getUserMedia({ video: { facingMode: (front ? \"user\" : \"environment\") } })\r\n                .then(stream => this.videoTag.current.srcObject = stream)\r\n                .catch(console.log);\r\n        }\r\n\r\n        frameVideo()\r\n\r\n        function flipBtn() {\r\n            if (front == false) {\r\n                front = true\r\n                navigator.mediaDevices\r\n                    .getUserMedia({ video: { facingMode: (front ? \"user\" : \"environment\") } })\r\n                    .then(stream => video.srcObject = stream)\r\n                    .catch(console.log);\r\n            } else {\r\n                front = false\r\n                navigator.mediaDevices.getUserMedia({ video: { facingMode: (front ? \"user\" : \"environment\") } })\r\n                    .then(stream => video.srcObject = stream)\r\n                    .catch(console.log);\r\n            }\r\n        }\r\n\r\n        btnFlip.addEventListener('click', function () {\r\n            flipBtn()\r\n        })\r\n\r\n        function AddColor() {\r\n            var tbClient = localStorage.getItem(\"ClientStorage\")\r\n            var clientColor = JSON.stringify({\r\n                id: uniqID,\r\n                color: setColor\r\n            })\r\n\r\n            // tbClient.push(clientColor)\r\n            if (tbClient === null) {\r\n                localStorage.setItem(\"ClientStorage\", clientColor)\r\n            } else {\r\n                localStorage.setItem(\"ClientStorage\", tbClient + clientColor)\r\n            }\r\n            // localStorage.clear()\r\n            console.log(localStorage.getItem(\"ClientStorage\"))\r\n        }\r\n\r\n        CaptureColor.addEventListener('click', function () {\r\n            // AddColor()\r\n        })\r\n\r\n        function frameVideo() {\r\n            contexCanvas.drawImage(video, 0, 0, video.offsetWidth, video.offsetHeight / 1.25);\r\n\r\n            let frame = contexCanvas.getImageData(0, 0, video.offsetWidth, video.offsetHeight / 1.25);\r\n\r\n            contexCanvas.putImageData(frame, 0, 0);\r\n            contexCanvas.scale(-1, -1)\r\n\r\n            setTimeout(frameVideo, 0)\r\n        }\r\n\r\n        const width = Math.floor(video.offsetWidth / 2.7);\r\n        const height = Math.floor(circleIndi.offsetTop * 9.5);\r\n        // console.log(width + \" \" + height)\r\n\r\n        // drawCircle()\r\n\r\n        // function drawCircle() {\r\n        //     var ctx = contexCanvas;\r\n        //     ctx.beginPath();\r\n        //     ctx.arc(width, height, 2, 0, 2 * Math.PI);\r\n        //     ctx.stroke();\r\n        // }\r\n\r\n        // drawCircle()\r\n\r\n        function imageData() {\r\n            var pixelData = contexCanvas.getImageData(width, height, 1, 1);\r\n            var data = pixelData.data;\r\n\r\n            // console.log(data);\r\n            ConvertToHex(data[0], data[1], data[2]);\r\n            setTimeout(() => {\r\n                imageData()\r\n            }, 1000);\r\n        }\r\n\r\n        if (video.play()) {\r\n            setTimeout(() => {\r\n                imageData()\r\n                // console.clear()\r\n            }, 1000);\r\n        }\r\n\r\n        function ConvertToHex(r, g, b) {\r\n            var hexaColor = \"#\" + getHexa(r) + getHexa(g) + getHexa(b);\r\n            // labelHexa.innerHTML = \"\" + hexaColor;\r\n            setColor = hexaColor\r\n            circleColor.style.backgroundColor = hexaColor\r\n            // console.log(color)\r\n        }\r\n\r\n        function getHexa(value) {\r\n            var hexa = parseInt(value).toString(16);\r\n            return hexa.length == 1 ? \"0\" + hexa : hexa;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"main__content\">\r\n                <div div className=\"video__container\" >\r\n                    <video\r\n                        ref={this.videoTag}\r\n                        id=\"video-tracking\"\r\n                        autoPlay\r\n                    />\r\n                    <canvas className=\"hidden__canvas\" ref={this.myCanvas}>\r\n                    </canvas>\r\n                    <div\r\n                        ref={this.circleIndicator}\r\n                        className=\"circle\">\r\n                    </div>\r\n                    <div\r\n                        className=\"circle-container\">\r\n                        <div className=\"circle__item\" style={{ animationDelay: '0s' }}></div>\r\n                        <div className=\"circle__item\" style={{ animationDelay: '1s' }}></div>\r\n                        <div className=\"circle__item\" style={{ animationDelay: '2s' }}></div>\r\n                        <div className=\"circle__item\" style={{ animationDelay: '3s' }}></div>\r\n                    </div>\r\n                    <div className=\"hover__item marker\">\r\n                        <div\r\n                            ref={this.circleTag}\r\n                            className=\"circle__color\">\r\n                        </div>\r\n                        {/* <h5 ref={this.labelTag}></h5> */}\r\n                    </div>\r\n                </div >\r\n                <div className=\"bottom__content\">\r\n                    <div className=\"color__list\">\r\n                        <div className=\"cirle__color\">\r\n                            <div className=\"icons\">\r\n                                X\r\n                </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"btn__container\">\r\n                        <div ref={this.btnClick} className=\"btn btn__flip\">\r\n                            <FlipCameraAndroidIcon id=\"icons\" />\r\n                        </div>\r\n                        <div\r\n                            className=\"btn__shot\"\r\n                            ref={this.btnCapture}\r\n                        >\r\n                            <CameraIcon id=\"camera\" />\r\n                        </div>\r\n                        <div className=\"btn btn__flip\">\r\n                            <MoreHorizIcon id=\"icons\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default VideoContent;\r\n","import React from 'react';\nimport './App.css';\nimport NavbarTop from './component/navbar top/index.js';\nimport VideoContent from './component/video/index.js';\n// import BottomContent from './component/bottom item/index.js';\n\nfunction App() {\n  return (\n    <div className=\"main__app\">\n      <NavbarTop />\n      <VideoContent />\n      {/* <BottomContent /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}